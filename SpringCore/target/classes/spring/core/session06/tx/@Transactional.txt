簡單說明每一種 @Transactional 傳播行為的範例，
以下使用您提供的 book（書籍）、stock（庫存）、wallet（錢包）和 log（交易紀錄）數據表。

REQUIRED：支持當前事務，如果當前沒有事務，就新建一個事務。這是最常見的選擇。 
情境：當一個用戶購買一本書時，我們需要進行多個操作：減少庫存（stock 表），扣減用戶餘額（wallet 表），並記錄交易（log 表）。
操作：這些操作必須在同一事務中完成。如果其中一個步驟失敗（比如餘額不足或庫存不夠），整個事務需要回滾，以保證數據的一致性。

REQUIRES_NEW：新建事務，如果當前存在事務，把當前事務掛起。 
情境：假設需要記錄每一次購書的嘗試，無論它最終是否成功。
操作：這樣的日誌記錄應該在一個新的事務中進行，即使購書事務發生失敗並回滾也不會影響 Log 的紀錄。這樣可以確保所有嘗試都被記錄下來。

SUPPORTS：支持當前事務，如果當前沒有事務，就以非事務方式執行。 
情境：假設我們只是查詢一本書的價格或庫存情況。
操作：這種查詢操作可以在無事務的環境下執行，但如果它是在執行購書事務的過程中調用，則它會成為該事務的一部分。

MANDATORY：支持當前事務，如果當前沒有事務，就拋出異常。 
情境：在一個事務性的銷售過程中，每次購書後必須更新庫存。
操作：更新庫存的操作必須在一個已經存在的事務內進行。如果沒有事務，則這個操作不能單獨執行，這確保了庫存的更改總是與銷售過程緊密相連。

NEVER：以非事務方式執行，如果當前存在事務，則拋出異常。 
情境：執行某些維護工作，這些工作絕對不能在事務中執行。
操作：例如，清理舊的交易記錄（log 表）。如果這些操作在一個事務中調用，會拋出異常。

NOT_SUPPORTED：以非事務方式執行操作，如果當前存在事務，就把當前事務掛起。 
情境：進行大量的報告生成或數據分析，這些操作不需要事務管理。
操作：這些操作可以在無事務的狀態下進行，以提高效率和減少資源使用。如果它們在事務中調用，事務會被暫停。

NESTED：支持當前事務，如果當前事務存在，則執行一個嵌套事務，如果當前沒有事務，就新建一個事務。
情境：在一次購書事務中，用戶可能會購買多本書。
操作：對於每一本書的購買操作，如果其中一本書的操作因為某些原因（如庫存不足）需要回滾，則只回滾該本書的操作，而不影響其他書的購買。這通過嵌套事務來實現。

這些範例顯示了如何根據不同的業務需求和情境選擇合適的事務傳播行為，以保證數據的一致性和穩定性。

